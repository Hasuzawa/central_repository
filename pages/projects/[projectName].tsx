import Head from 'next/head';
import Image from 'next/image';
import Link from "next/link";
import type { NextPage, GetStaticPaths, GetStaticProps } from "next";
import { useContext } from "react";


import projects, { Project } from "~/public/staticData/projects";
import Header from "~/components/Header/Header";
import Footer from "~/components/Footer/Footer";

import darkModeClassName from "~/components/context/darkModeClassName";

interface ProjectPageProps{
    props: {
        data: {
            project: Project
        }
    }
    data: {
        project: Project
    }
}



const ProjectPage: NextPage<ProjectPageProps> = (props: ProjectPageProps) => {
    console.log("props is this:", props)
    const project = props.data.project;

    return (
        <div className={"flex flex-col w-screen h-screen" + darkModeClassName()}>
            <Head>
                <title>{project.projectName}</title>
                {/* <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" /> */}
            </Head>
            <Header />
            <main className="flex-1 max-w-screen-lg self-center flex flex-col min-w-0 min-h-0 overflow-x-hidden overflow-y-scroll">
                <div>
                    <h1>{project.heading}</h1>
                    <span>{project.status}</span>
                </div>
                {/* StringToLogo */}
                
                

                {/* <span>year is {project.year}</span> */}


            </main>
            <Footer displayReturn={true}/>
        </div>
    );
}

export default ProjectPage;


export const getStaticPaths: GetStaticPaths = async () => {
    let pathArray = projects.map((project: Project) => {return {params: {projectName: project.projectName}}});

    return {paths: pathArray, fallback: false};
}


export const getStaticProps: GetStaticProps = async (context) => {
    const { params } = context;
    const projectName = params?.projectName;

    const project: Project | undefined = projects.find((project: Project) => project.projectName === projectName);

    return {
        props: {
            data: {
                project
            }
        }
    }
}
